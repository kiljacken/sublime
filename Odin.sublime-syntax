%YAML 1.2
---
# http://www.sublimetext.com/docs/3/syntax.html
name: Odin
file_extensions:
  - odin
first_line_match: "-[*]-( Mode:)? Odin -[*]-"
scope: source.odin
variables:
  identifier: '\b[[:alpha:]_][[:alnum:]_]*\b'
  type_chars: '[[:alnum:]\s,._^<>\[\]-]'

contexts:
  main:
    - include: global

  global:
    - include: comments
    - include: keywords
    - include: functions
    - include: types
    - include: declarations
    - include: strings
    - include: string-escaped-char
    - include: custom_styling


  custom_styling:
    - match: \b([A-Z_](?![a-z])[A-Z_0-9]+)\b
      captures:
        1: storage.constant.odin

    - match: \b([A-Z][a-z0-9]+)([_A-Z][a-z0-9]*)*\b
      scope: storage.type.odin

  block-comment:
    - match: /\*
      scope: punctuation.definition.comment.odin
      push:
        - meta_scope: comment.block.odin
        - match: \*/
          scope: punctuation.definition.comment.odin
          pop: true
        - include: block-comment

  comments:
    - include: block-comment
    - match: //
      scope: punctuation.definition.comment.odin
      push:
        - meta_scope: comment.line.double-slash.odin
        - match: \n
          pop: true

  keywords:
    - match: \b(match|continue|case|default|if|defer|else|for|range|fallthrough|return|break|type|using|asm|volatile|overload)\b
      scope: keyword.control.odin
    - match: \b(null|true|false)\b
      scope: constant.language.odin
    - match: '\b((0(x|X)\h*)|(([0-9]+\.?[0-9]*)|(\.[0-9]+))((e|E)(\+|-)?[0-9]+)?)\b'
      scope: constant.numeric.odin
    - match: \b(proc|struct|enum|union|raw_union)\b
      scope: storage.type.odin
    - match: \b(as|transmute|down_cast)\b
      scope: keyword.operator.odin
    - match: \b((size_of|align_of|offset_of)(_val)?|type_of_val)\b\s*\(
      captures:
        1: keyword.function.odin
    - match: '(#\s*{{identifier}})'
      scope: keyword.tag.odin

  functions:
    - match: \b({{identifier}})\b\s*::\s*(proc)\s*\(
      captures:
        1: meta.function.odin entity.name.function.odin
        2: storage.type.odin
    - include: function-use
    - match: ({{identifier}})\s*[\(]
      captures:
        1: support.function.odin

    - match: (\'[\']?)\s*({{identifier}})
      captures:
        2: support.function.odin


  declarations:
    - match: \b({{identifier}})\b\s*:\s*(type)?\s*:\s*((type)|(struct|enum|union|raw_union))\s+
      captures:
        1: meta.type.odin entity.name.type.odin
        2: keyword.control.odin
        4: keyword.control.odin
        5: storage.type.odin
      push:
        - match: ''
          pop: true
        - include: types

  types:
    - match: '\b(struct|union|raw_union)\b(?:(\{)(\}))?'
      captures:
        1: storage.type.odin
        2: meta.block.odin punctuation.definition.block.begin.odin
        3: meta.block.odin punctuation.definition.block.end.odin
    - match: (\[)(\d*)(\])(?=[[:alpha:]_])
      scope: meta.brackets.odin
      captures:
        1: punctuation.definition.brackets.begin.odin
        2: constant.numeric.odin
        3: punctuation.definition.brackets.end.odin
    - include: basic-types

  basic-types:
    - match: '\b((i8|i16|i32|i64|int)?|(u8|u16|u32|u64|uint)?|(f32|f64)?|byte|bool|string|rune|rawptr|any)\b'
      scope: storage.type.odin

  strings:
    - match: '"'
      scope: punctuation.definition.string.begin.odin
      push:
        - meta_scope: string.quoted.double.odin
        - match: '"'
          scope: punctuation.definition.string.end.odin
          pop: true
        - include: string-placeholder
        - include: string-escaped-char
        - include: print-fmt
    - match: "`"
      scope: punctuation.definition.string.begin.odin
      push:
        - meta_scope: string.quoted.raw.odin
        - match: "`"
          scope: punctuation.definition.string.end.odin
          pop: true
        - include: string-placeholder


  string-escaped-char:
    - match: '\\(\\|[abfnrutv''"]|x\h{2}|u\h{4}|U\h{8}|[0-7]{3})'
      scope: constant.character.escape.odin
    - match: \\.
      scope: invalid.illegal.unknown-escape.odin

  print-fmt:
    - match: '%(%|\d*)'
      scope: constant.character.escape.odin

